# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `py2serv.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module py2serv
_M_py2serv = Ice.openModule('py2serv')
__name__ = 'py2serv'

if 'Message' not in _M_py2serv.__dict__:
    _M_py2serv.Message = Ice.createTempClass()
    class Message(object):
        def __init__(self, date='', mission=0, action='', idObjet=0):
            self.date = date
            self.mission = mission
            self.action = action
            self.idObjet = idObjet

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.date)
            _h = 5 * _h + Ice.getHash(self.mission)
            _h = 5 * _h + Ice.getHash(self.action)
            _h = 5 * _h + Ice.getHash(self.idObjet)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_py2serv.Message):
                return NotImplemented
            else:
                if self.date is None or other.date is None:
                    if self.date != other.date:
                        return (-1 if self.date is None else 1)
                else:
                    if self.date < other.date:
                        return -1
                    elif self.date > other.date:
                        return 1
                if self.mission is None or other.mission is None:
                    if self.mission != other.mission:
                        return (-1 if self.mission is None else 1)
                else:
                    if self.mission < other.mission:
                        return -1
                    elif self.mission > other.mission:
                        return 1
                if self.action is None or other.action is None:
                    if self.action != other.action:
                        return (-1 if self.action is None else 1)
                else:
                    if self.action < other.action:
                        return -1
                    elif self.action > other.action:
                        return 1
                if self.idObjet is None or other.idObjet is None:
                    if self.idObjet != other.idObjet:
                        return (-1 if self.idObjet is None else 1)
                else:
                    if self.idObjet < other.idObjet:
                        return -1
                    elif self.idObjet > other.idObjet:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_py2serv._t_Message)

        __repr__ = __str__

    _M_py2serv._t_Message = IcePy.defineStruct('::py2serv::Message', Message, (), (
        ('date', (), IcePy._t_string),
        ('mission', (), IcePy._t_int),
        ('action', (), IcePy._t_string),
        ('idObjet', (), IcePy._t_int)
    ))

    _M_py2serv.Message = Message
    del Message

if '_t_MessageList' not in _M_py2serv.__dict__:
    _M_py2serv._t_MessageList = IcePy.defineSequence('::py2serv::MessageList', (), _M_py2serv._t_Message)

# End of module py2serv
